// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  clerkId            String               @unique
  email              String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  stripeCustomerId   String?
  subscriptionStatus String?              @default("FREE")
  subscriptionId     String?
  metadata           Json                 @default("{}")
  contracts          Contract[]
  referrals          Referral[]
  contractComparisons ContractComparison[]
}

model Contract {
  id                 String               @id @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title              String
  originalText       String               @db.Text
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  riskLevel          String?
  issues             Issue[]
  contractType       String               @default("ANALYZED")
  metadata           Json                 @default("{}")
  recommendedActions Json                 @default("[]")
  complianceFlags    Json                 @default("[]")
  originalComparisons ContractComparison[] @relation("OriginalContract")
  revisedComparisons ContractComparison[] @relation("RevisedContract")
}

model Issue {
  id                 String               @id @default(uuid())
  contractId         String
  contract           Contract             @relation(fields: [contractId], references: [id], onDelete: Cascade)
  type               String
  text               String               @db.Text
  explanation        String               @db.Text
  suggestion         String               @db.Text
  severityScore      Int                  @default(5)
  industryRelevance  String[]             @default([])
  createdAt          DateTime             @default(now())
}

model Referral {
  id                 String               @id @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  email              String
  status             String               // PENDING, COMPLETED, EXPIRED
  referredUserId     String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model ContractComparison {
  id                 String               @id @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalContractId String
  originalContract   Contract             @relation("OriginalContract", fields: [originalContractId], references: [id], onDelete: Cascade)
  revisedContractId  String
  revisedContract    Contract             @relation("RevisedContract", fields: [revisedContractId], references: [id], onDelete: Cascade)
  differences        Json                 @default("{}")
  createdAt          DateTime             @default(now())
}

